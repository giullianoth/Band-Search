@mixin set-fonts() {
    @each $presets in $fonts {

        $weight: ();
        $family: ();
        $files: ();
        $path: ();
        $format: ();
    
        @each $attr, $values in $presets {
    
            @if $attr =="weights" {
                @for $w from 1 through length($list: $values) {
                    $weight: append($list: $weight, $val: nth($list: $values, $n: $w), $separator: comma);
                }
            }
    
            @if $attr =="family" {
                @for $f from 1 through length($list: $weight) {
                    $family: append($list: $family, $val: $values, $separator: comma);
                }
            }
    
            @if $attr =="files" {
                @for $fl from 1 through length($list: $weight) {
                    $files: append($list: $files, $val: nth($list: $values, $n: $fl), $separator: comma);
                }
            }
    
            @if $attr =="path" {
                @for $p from 1 through length($list: $weight) {
                    $path: append($list: $path, $val: "#{$font-path}/#{$values}/#{nth($list: $files, $n: $p)}", $separator: comma);
                }
            }
    
            @if $attr =="format" {
                @for $fm from 1 through length($list: $weight) {
                    $format: append($list: $format, $val: $values, $separator: comma);
                }
            }
        }
    
        @for $font from 1 through length($list: $weight) {
            @font-face {
                font-family: nth($list: $family, $n: $font);
                src: url(nth($list: $path, $n: $font)) format(nth($list: $format, $n: $font));
                font-weight: nth($list: $weight, $n: $font);
            }
        }
    }
}

@mixin content-full() {
    width: 100%;
    max-width: 100vw;
}

@mixin content() {
    max-width: $container-max-width;
    margin: 0 auto;
    padding: 0 20px;
}

@mixin no-display() {
    display: none !important;
}

@mixin inline-block() {
    display: inline-block;
}

@mixin flex() {
    display: flex;
    justify-content: center;
    align-items: center;
    flex-wrap: wrap;
}

@mixin flex-basis($flex-basis, $gap: 0) {
    @if $gap ==0 {
        flex-basis: $flex-basis;
    }

    @else {
        flex-basis: calc($flex-basis - $gap);
    }
}

@mixin flex-1($gap: 0) {
    $basis: 100% / 1;
    @include flex-basis($basis, $gap);
}

@mixin flex-2($gap: 0) {
    $basis: 100% / 2;
    @include flex-basis($basis, $gap);
}

@mixin flex-3($gap: 0) {
    $basis: 100% / 3;
    @include flex-basis($basis, $gap);
}

@mixin flex-4($gap: 0) {
    $basis: 100% / 4;
    @include flex-basis($basis, $gap);
}

@mixin relative() {
    position: relative;
}

@mixin absolute() {
    position: absolute;
    top: 0;
    left: 0;
}

@mixin absolute-full() {
    @include absolute;
    width: 100%;
    height: 100%;
}

@mixin absolute-center() {
    @include absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
}

@mixin fixed() {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
}

@mixin transition($property: all, $duration: $transition-duration, $timing-function: $transition-timing-function) {
    transition: $property $duration $timing-function;
}

@mixin reflect($color: $color-highlight) {
    &::before {
        content: "";

        @include absolute;
        left: -30%;
        top: -50%;
        bottom: -50%;
        z-index: -1;
        width: 40px;
        height: 200%;

        transform: rotate(30deg);
        filter: blur(4px);

        background-color: $color;
        opacity: 0.4;

        @include transition;
    }

    &:hover::before {
        left: 120%;
    }
}

@mixin button() {
    @include inline-block;

    padding: $input-default-padding;

    background-color: $color-tertiary;

    text-transform: uppercase;
    color: $white;
    font-weight: 700;

    border: none;

    @include relative;
    z-index: 1;

    overflow: hidden;

    cursor: pointer;
    @include transition;

    @include reflect;

    i {
        margin-right: 10px;
    }
}

@mixin box-shadow($values: 1px 1px 3px, $color: rgba(0, 0, 0, 0.1)) {
    box-shadow: $values $color;
}

@mixin border($border-width: 1px, $border-style: solid, $border-color: $color-shadow) {
    border: $border-width $border-style $border-color;
}

@mixin set-radius($radius-value) {
    border-radius: $radius-value;
    -moz-border-radius: $radius-value;
    -webkit-border-radius: $radius-value;
}

@mixin radius($radius-value: 0) {
    @if $radius-value ==0 {
        @include set-radius($radius);
    }

    @else {
        @include set-radius($radius-value);
    }
}

@mixin bg-image($img-path: "") {
    @if $img-path  !="" {
        background-image: url($img-path);
    }

    background-repeat: no-repeat;
    background-size: cover;
    background-position: center center;
}

@mixin switch($width: 30px, $height: 15px) {
    @include relative;

    &>i {
        width: $width;
        height: $height;

        background-color: $color-shadow;

        cursor: pointer;

        @include inline-block;

        @include radius($height);

        @include relative;

        @include set-responsive-design(480px, (
            width: 40px,
            height: 20px
        ));

        &::before {
            content: "";

            @include absolute;

            width: $height;
            height: $height;

            @include radius($height);

            @include border(3px);
            background-color: $color-highlight;

            @include transition(left, $transition-duration, ease-out);

            @include set-responsive-design(480px, (
                width: 20px,
                height: 20px
            ));
        }

        &.turned-on::before {
            left: calc(100% - $height);

            @include set-responsive-design(480px, (
                left: calc(100% - 20px)
            ));
        }
    }
}

@mixin set-responsive-design($screen-width, $setup, $is-min-width: false) {

    $width-setup: "";

    @if $is-min-width ==false {
        $width-setup: "max";
    }

    @else if $is-min-width ==true {
        $width-setup: "min";
    }

    @else {
        @error "Valor inválido para IS-MIN-WIDTH. Entre com 'true' ou 'false'.";
    }

    @media (#{$width-setup}-width: $screen-width) {
        @each $attr,
        $value in $setup {
            #{$attr}: #{$value};
        }
    }
}

@mixin animation($name, $setup, $animation-duration: 1s, $animation-iteration-count: infinite, $animation-timing-function: ease-in-out) {
    animation: $name $animation-duration $animation-iteration-count $animation-timing-function;
    
    @keyframes #{$name} {
        @for $i from 1 through length($list: $setup) {

            $frame: calc((($i * 100%) / (length($list: $setup) - 1)) - (100% / (length($list: $setup) - 1)));
            
            #{$frame} {
                @each $attr, $value in nth($list: $setup, $n: $i) {
                    #{$attr}: #{$value};
                }
            }
        }
    }
}

@mixin fade($mode: "in", $time: $transition-duration) {

    $start: "";
    $end: "";
    $setup: ();

    @if $mode == "in" {
        $start: 0;
        $end: 1 !important;
        $setup: (
            (opacity: $start),
            (opacity: $end)
        );
    }

    @else if $mode == "out" {
        $start: 1;
        $end: 0;
        $setup: (
            (opacity: $start),
            (opacity: $end)
        );
    }

    @else {
        @error "Modo '#{$mode}' inválido, entre com 'in' ou 'out'.";
    }

    opacity: $start;

    @include animation(fade, $setup, $transition-duration, 1);
}

@mixin fadeIn() {
    &.fade-in {
        @include fade("in");
    }
}

@mixin fadeOut() {
    &.fade-out {
        @include fade("out");
    }
}

@mixin gradient-bg($colors, $direction: right) {

    $setColors: ();

    @each $color in $colors {
        $setColors: append($list: $setColors, $val: $color, $separator: comma);
        @debug $setColors;
    }

    background-image: linear-gradient(to #{$direction}, $setColors);
}